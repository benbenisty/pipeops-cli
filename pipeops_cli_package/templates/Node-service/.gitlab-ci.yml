# GitLab CI/CD Pipeline for {{project_name}} Node.js Service
# Generated by PipeOps CLI on {{creation_date}}

stages:
  - test
  - build
  - deploy

variables:
  DOCKER_IMAGE: $CI_REGISTRY_IMAGE
  DOCKER_TAG: $CI_COMMIT_SHA
  NODE_VERSION: "18"

test:
  stage: test
  image: node:$NODE_VERSION-alpine
  before_script:
    - npm ci
  script:
    - npm run test || echo "No test script found"
    - npm run lint || echo "No lint script found"
  only:
    - main
    - develop
    - merge_requests

build:
  stage: build
  image: docker:20.10.12
  services:
    - docker:20.10.12-dind
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - docker build -t $DOCKER_IMAGE:$DOCKER_TAG .
    - docker push $DOCKER_IMAGE:$DOCKER_TAG
  only:
    - main
    - develop

deploy:
  stage: deploy
  image: registry.redhat.io/ubi8/ubi:latest
  before_script:
    - curl -LO https://mirror.openshift.com/pub/openshift-v4/clients/oc/latest/linux/oc.tar.gz
    - tar -xzf oc.tar.gz && chmod +x oc && mv oc /usr/local/bin/
    - oc login $OPENSHIFT_SERVER --token=$OPENSHIFT_TOKEN --insecure-skip-tls-verify=true
  script:
    - |
      # Create deployment
      oc create deployment {{project_name}} --image=$DOCKER_IMAGE:$DOCKER_TAG --dry-run=client -o yaml | oc apply -f -

      # Expose service
      oc expose deployment/{{project_name}} --port=3000 --target-port=3000 --dry-run=client -o yaml | oc apply -f -

      # Create route
      oc expose service/{{project_name}} --dry-run=client -o yaml | oc apply -f -

      # Wait for deployment
      oc rollout status deployment/{{project_name}} --timeout=300s || echo "Deployment may still be in progress"
  environment:
    name: development
    url: https://{{project_name}}-dev.apps.company.com
  only:
    - develop
