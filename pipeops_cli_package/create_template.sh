#!/bin/bash

echo "📁 Creating Template Files..."

# Create directory structure
mkdir -p Templates/Python-service/oc-params
mkdir -p Templates/Python-package
mkdir -p Templates/Node-service

# Python Service GitLab CI
cat > Templates/Python-service/.gitlab-ci.yml << 'EOF'
# GitLab CI/CD Pipeline for {{project_name}} Python Service
# Generated by PipeOps CLI on {{creation_date}}

stages:
  - test
  - build
  - deploy

variables:
  DOCKER_IMAGE: $CI_REGISTRY_IMAGE
  DOCKER_TAG: $CI_COMMIT_SHA

test:
  stage: test
  image: python:3.9-slim
  before_script:
    - pip install -r requirements.txt
  script:
    - python -m pytest tests/ -v || echo "No tests found"
    - python -m flake8 . --max-line-length=88 || echo "No flake8 config"
  only:
    - main
    - develop
    - merge_requests

build:
  stage: build
  image: docker:20.10.12
  services:
    - docker:20.10.12-dind
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - docker build -t $DOCKER_IMAGE:$DOCKER_TAG .
    - docker push $DOCKER_IMAGE:$DOCKER_TAG
  only:
    - main
    - develop

deploy:
  stage: deploy
  image: registry.redhat.io/ubi8/ubi:latest
  before_script:
    - curl -LO https://mirror.openshift.com/pub/openshift-v4/clients/oc/latest/linux/oc.tar.gz
    - tar -xzf oc.tar.gz && chmod +x oc && mv oc /usr/local/bin/
    - oc login $OPENSHIFT_SERVER --token=$OPENSHIFT_TOKEN --insecure-skip-tls-verify=true
  script:
    - |
      # Apply OpenShift configuration
      sed -e "s/{{{{PROJECT_NAME}}}}/{{project_name}}/g" \
          -e "s/{{{{IMAGE_TAG}}}}/$DOCKER_TAG/g" \
          oc_params/dev_values.yaml | oc apply -f -

      # Wait for deployment
      oc rollout status deployment/{{project_name}} --timeout=300s || echo "Deployment may still be in progress"
  environment:
    name: development
    url: https://{{project_name}}-dev.apps.company.com
  only:
    - develop
EOF

# Python Service OpenShift Dev Values
cat > Templates/Python-service/oc-params/dev_values.yaml << 'EOF'
# Development environment for {{project_name}}
# Generated by PipeOps CLI on {{creation_date}}

apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{PROJECT_NAME}}
  labels:
    app: {{PROJECT_NAME}}
    environment: dev
spec:
  replicas: 1
  selector:
    matchLabels:
      app: {{PROJECT_NAME}}
  template:
    metadata:
      labels:
        app: {{PROJECT_NAME}}
        environment: dev
    spec:
      containers:
      - name: {{PROJECT_NAME}}
        image: $CI_REGISTRY_IMAGE:{{IMAGE_TAG}}
        imagePullPolicy: Always
        ports:
        - containerPort: 8080
        env:
        - name: ENVIRONMENT
          value: "development"
        resources:
          requests:
            memory: "256Mi"
            cpu: "250m"
          limits:
            memory: "512Mi"
            cpu: "500m"

---
apiVersion: v1
kind: Service
metadata:
  name: {{PROJECT_NAME}}
  labels:
    app: {{PROJECT_NAME}}
spec:
  selector:
    app: {{PROJECT_NAME}}
  ports:
  - port: 80
    targetPort: 8080
  type: ClusterIP

---
apiVersion: route.openshift.io/v1
kind: Route
metadata:
  name: {{PROJECT_NAME}}-route
  labels:
    app: {{PROJECT_NAME}}
spec:
  to:
    kind: Service
    name: {{PROJECT_NAME}}
  port:
    targetPort: 8080
  tls:
    termination: edge
EOF

# Python Service OpenShift Staging Values
cat > Templates/Python-service/oc-params/stg_values.yaml << 'EOF'
# Staging environment for {{project_name}}
# Generated by PipeOps CLI on {{creation_date}}

apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{PROJECT_NAME}}
  labels:
    app: {{PROJECT_NAME}}
    environment: stg
spec:
  replicas: 2
  selector:
    matchLabels:
      app: {{PROJECT_NAME}}
  template:
    metadata:
      labels:
        app: {{PROJECT_NAME}}
        environment: stg
    spec:
      containers:
      - name: {{PROJECT_NAME}}
        image: $CI_REGISTRY_IMAGE:{{IMAGE_TAG}}
        imagePullPolicy: Always
        ports:
        - containerPort: 8080
        env:
        - name: ENVIRONMENT
          value: "staging"
        resources:
          requests:
            memory: "512Mi"
            cpu: "500m"
          limits:
            memory: "1Gi"
            cpu: "1000m"

---
apiVersion: v1
kind: Service
metadata:
  name: {{PROJECT_NAME}}
  labels:
    app: {{PROJECT_NAME}}
spec:
  selector:
    app: {{PROJECT_NAME}}
  ports:
  - port: 80
    targetPort: 8080
  type: ClusterIP

---
apiVersion: route.openshift.io/v1
kind: Route
metadata:
  name: {{PROJECT_NAME}}-route
  labels:
    app: {{PROJECT_NAME}}
spec:
  to:
    kind: Service
    name: {{PROJECT_NAME}}
  port:
    targetPort: 8080
  tls:
    termination: edge
EOF

# Python Service OpenShift Production Values
cat > Templates/Python-service/oc-params/prod_values.yaml << 'EOF'
# Production environment for {{project_name}}
# Generated by PipeOps CLI on {{creation_date}}

apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{PROJECT_NAME}}
  labels:
    app: {{PROJECT_NAME}}
    environment: prod
spec:
  replicas: 3
  selector:
    matchLabels:
      app: {{PROJECT_NAME}}
  template:
    metadata:
      labels:
        app: {{PROJECT_NAME}}
        environment: prod
    spec:
      containers:
      - name: {{PROJECT_NAME}}
        image: $CI_REGISTRY_IMAGE:{{IMAGE_TAG}}
        imagePullPolicy: Always
        ports:
        - containerPort: 8080
        env:
        - name: ENVIRONMENT
          value: "production"
        resources:
          requests:
            memory: "1Gi"
            cpu: "1000m"
          limits:
            memory: "2Gi"
            cpu: "2000m"

---
apiVersion: v1
kind: Service
metadata:
  name: {{PROJECT_NAME}}
  labels:
    app: {{PROJECT_NAME}}
spec:
  selector:
    app: {{PROJECT_NAME}}
  ports:
  - port: 80
    targetPort: 8080
  type: ClusterIP

---
apiVersion: route.openshift.io/v1
kind: Route
metadata:
  name: {{PROJECT_NAME}}-route
  labels:
    app: {{PROJECT_NAME}}
spec:
  to:
    kind: Service
    name: {{PROJECT_NAME}}
  port:
    targetPort: 8080
  tls:
    termination: edge
EOF

# Python Package GitLab CI
cat > Templates/Python-package/.gitlab-ci.yml << 'EOF'
# GitLab CI/CD Pipeline for {{project_name}} Python Package
# Generated by PipeOps CLI on {{creation_date}}

stages:
  - test
  - build
  - publish

variables:
  PACKAGE_NAME: {{project_name}}

test:
  stage: test
  image: python:3.9-slim
  before_script:
    - pip install --upgrade pip
    - pip install -e . || echo "No setup.py found"
    - pip install pytest pytest-cov flake8 || echo "Installing test dependencies"
  script:
    - python -m pytest tests/ -v || echo "No tests found"
    - python -m flake8 {{project_name}}/ || echo "No source directory found"
  only:
    - main
    - develop
    - merge_requests

build:
  stage: build
  image: python:3.9-slim
  before_script:
    - pip install build twine
  script:
    - python -m build
    - python -m twine check dist/*
  artifacts:
    paths:
      - dist/
    expire_in: 1 week
  only:
    - main
    - develop
    - tags

publish-pypi:
  stage: publish
  image: python:3.9-slim
  before_script:
    - pip install twine
  script:
    - python -m twine upload dist/* --username __token__ --password $PYPI_TOKEN
  dependencies:
    - build
  when: manual
  only:
    - tags
EOF

# Node Service GitLab CI
cat > Templates/Node-service/.gitlab-ci.yml << 'EOF'
# GitLab CI/CD Pipeline for {{project_name}} Node.js Service
# Generated by PipeOps CLI on {{creation_date}}

stages:
  - test
  - build
  - deploy

variables:
  DOCKER_IMAGE: $CI_REGISTRY_IMAGE
  DOCKER_TAG: $CI_COMMIT_SHA
  NODE_VERSION: "18"

test:
  stage: test
  image: node:$NODE_VERSION-alpine
  before_script:
    - npm ci
  script:
    - npm run test || echo "No test script found"
    - npm run lint || echo "No lint script found"
  only:
    - main
    - develop
    - merge_requests

build:
  stage: build
  image: docker:20.10.12
  services:
    - docker:20.10.12-dind
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - docker build -t $DOCKER_IMAGE:$DOCKER_TAG .
    - docker push $DOCKER_IMAGE:$DOCKER_TAG
  only:
    - main
    - develop

deploy:
  stage: deploy
  image: registry.redhat.io/ubi8/ubi:latest
  before_script:
    - curl -LO https://mirror.openshift.com/pub/openshift-v4/clients/oc/latest/linux/oc.tar.gz
    - tar -xzf oc.tar.gz && chmod +x oc && mv oc /usr/local/bin/
    - oc login $OPENSHIFT_SERVER --token=$OPENSHIFT_TOKEN --insecure-skip-tls-verify=true
  script:
    - |
      # Create deployment
      oc create deployment {{project_name}} --image=$DOCKER_IMAGE:$DOCKER_TAG --dry-run=client -o yaml | oc apply -f -

      # Expose service
      oc expose deployment/{{project_name}} --port=3000 --target-port=3000 --dry-run=client -o yaml | oc apply -f -

      # Create route
      oc expose service/{{project_name}} --dry-run=client -o yaml | oc apply -f -

      # Wait for deployment
      oc rollout status deployment/{{project_name}} --timeout=300s || echo "Deployment may still be in progress"
  environment:
    name: development
    url: https://{{project_name}}-dev.apps.company.com
  only:
    - develop
EOF

echo "✅ Template files created successfully!"
echo ""
echo "📁 Created templates:"
echo "   - Templates/Python-service/.gitlab-ci.yml"
echo "   - Templates/Python-service/oc_params/ (3 files)"
echo "   - Templates/Python-package/.gitlab-ci.yml"
echo "   - Templates/Node-service/.gitlab-ci.yml"